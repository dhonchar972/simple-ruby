puts 2 + 2

puts 'Hello, world!'.size

begin
    puts 'Hello, world!'
    puts 'Hello, Ruby!'
end

my_begin = 2 + 2
puts my_begin

CONST = 12
puts CONST # 12

puts 'Hello world!'.object_id # 60
puts 3.between? 0, 10 # true
puts 3.between? 10, 20 # false

obj = Object.new
puts obj.object_id # 80

class Hello
end
h = Hello.new
puts h.class # Hello

def greeting
    puts 'Hello, world!'
end
greeting

class HelloWorldClass
    def greeting
        puts 'Hello, world class!'
    end
end
h = HelloWorldClass.new
h.greeting # Hello, world class!

puts 5 + 2 # 7
puts 5 - 2 # 3
puts 5 * 2 # 10
puts 5 / 2 # 2
puts 2 ** 32 # 4294967296
puts 32 % 5 # 2

puts 2_000_000 + 1_900_200 # 3900200
puts 0xffcc00 # 16763904
puts 242.to_s(2) # 11110010
puts 1.2e-4 # 0.00012
puts 3.461256e+2 # 346.1256
puts 1.8e307 # 1.8E+307
puts 1.8e308 # Infinity
puts 1.8e308 - 1.0e307 # Infinity
puts 0 / 0.0 # NaN
puts 1 - 0 / 0.0 # NaN
number = 42.0
infpos = 100 / 0.0
infneg = -100 / 0.0
nan = 0 / 0.0
p number.infinite? # nil
p infpos.infinite? # 1
p infneg.infinite? # -1
p number.nan? # false
puts 7 / 2.0 # 3.5
puts 2.0.to_i # 2
puts 2.to_f # 2.0
puts 1..5 # 1, 2, 3, 4, 5
puts 1...5 # 1, 2, 3, 4
puts (1..5).first # 1
puts (1..5).last # 5
range = 1..5
p range.include? 3 # true
p range.include? 7 # false
p (1..).include? 100500 # true
p (1..).include? -1 # false
range = 1..5
p range.cover?(3) # true
p range.cover?(10) # false
p range.include?(2..3) # false
p range.cover?(2..3) # true
p range.cover?(3..7) # false

# same to
puts 5 + 2
puts 5.+ 2
puts 5.+(2)

puts '3'.inspect # "3"
puts 3.inspect # 3

p '3' # "3"
p 3 # 3

pp '3' # "3" # pretty-printer
pp 3 # 3

puts 2.class # Integer
puts 'hello'.class # String

puts 3.respond_to? 'between?' # true, integer has method 'between?'
puts 3.respond_to? 'puts' # false
puts 3.methods

str = 'Jim'
puts "Hello #{str}" # interpolation
print 'hello', "world\n"
puts %q(Hello, world!) # equivalent of single quotes
name = 'Ruby'
puts %Q(Hello, #{name}!) # equivalent of double quotes

str = <<here 
    In the string generated by the heredoc operator,
    string translations are preserved.
    It is an ideal tool for entering large texts.
here
puts str
# <<-here # <<~here # allow or remove whitespace indents

puts <<~here
    2 + 2 = #{ 2 + 2 }
here

puts `ls` # use scripts in shell
# puts `dir` # windows equivalent
puts %x(ls)

str = 'Hello, world!'
puts str[0] # H

puts str[7, 5] # world # range(slice in python)

str[7..11] = 'Ruby'
puts str # Hello, Ruby!

puts 'Hello, world!'.sub('l', '-') # He-lo, world!
puts 'Hello, world!'.gsub('l', '-') # He--o, wor-d!
puts 'Hello, world!'.size
puts 'Hello, world!'.length

puts :white # symbol, it is real constant, work faster

array = Array.new
puts array # []
array = [1, 2, 3, 4, 5]
p array[0] # 1
p array[-1] # 5
p array[2, 2] # [3, 4]
p array[2..3] # [3, 4]
arr = [1, 'hello', 3, ['first', 'second']]
colors = [
    'red', 'orange', 'yellow', 'green',
    'blue', 'indigo', 'violet'
]
p colors
colors = %w[red orange yellow green blue indigo violet]
p colors
colors = [:red, :orange, :yellow, :green, :blue, :indigo, :violet]
p colors
colors = %i[red orange yellow green blue indigo violet]
p colors

# hash
h = { 'first' => 'hello', 'second' => 'world' }
puts h['second'] # world
h = { :first => 'hello', :second => 'world' }
puts h[:first] # hello
h = { first: 'hello', second: 'world' }
puts h[:first] # hello

puts 3 == 2 + 1 # true
puts 4 == 5 # false

# nil
arr = [1, 2, 3, 4, 5]
p arr[0] # 1
p arr[10] # nil